{"version":3,"sources":["Heatmap.js","HeatmapAnnotation.js","CategoricalColor.js","Phylo.js","Figure.js","Sankey.js","Tab.js","App.js","reportWebVitals.js","index.js"],"names":["drawChromosomeHeatmap","context","color","heatmapData","cellWidth","cellHeight","padding","xOffset","i","offset","index","value","length","drawHeatmapCell","x","y","beginPath","fillStyle","fillRect","columnAnnotations","Array","keys","map","c","scaleLinear","domain","rangeRound","heatmapWidth","heatmapHeight","save","translate","forEach","drawTick","textAlign","font","fillText","chr","drawTickText","restore","chr_index","chr_data","y_index","x_index","drawHeatmapChromosome","drawHeatmapRowAnnotation","colors","annotationData","annotationColumns","showColumnLabel","drawAnnotationCell","drawOneAnnotationLabel","label","width","measureText","rotate","Math","PI","drawOneAnnotation","columnIndex","annotationDataColumn","annotationWidth","annotationHeight","textHeight","columnName","max","convertHexToRgba","hex","alpha","r","parseInt","slice","g","b","drawHeatmapPhylo","data","phyloWidth","is_tree_cluster","nodePieCharts","scaleTo","outerRingWidth","separation1","a","parent","tree_func","root","hierarchy","cluster","nodeSize","height","separation","tree","calculateMaxLength","previousLength","undefined","y_scaled","children","calculateMaxHeight","currentHeight","childY","currentScaledY","childScaledY","results","scaleTreeHeight","scale","scaleTree","maxs","drawLines","descendant","minChildY","Infinity","minChildX","maxChildX","jointY","moveTo","lineTo","stroke","console","log","x0","x1","each","d","y0","y1","descendants","drawNodePieCharts","treeData","arcs","name","inner","total_count","j","outer","pie_func","pie","padAngle","sort","drawOuterRing","dataOuter","arc","startAngle","endAngle","fill","drawInnerPie","dataInner","radius","maxRadius","apply","Object","values","Figure","props","createFigure","bind","this","node","select","attr","getContext","allData","schemeSet1","concat","schemeSet2","schemeSet3","dataSet","Set","colorMap","input","categoricalColorGenerator","cnv_meta","pieChartColor","addColors","pie_chart","o","phyloDims","heatmapPhyloDims","annotationDimensions","cnvDimensions","n","cnv_matrix","sankeyWidth","leftHeight","rightHeight","rightStartX","rightStartY","columnWidth","filters","drawRect","drawFlow","x2","y2","x3","y3","bezierCurveTo","element","includes","drawSankey","sankey","terminal_nodes","annotationExprDimensions","expr_meta","expr_matrix","ref","Component","Tab","state","visibleTab","id","availableFigs","handleClick","switchTab","setState","newAvailableFigs","has","add","listTitles","item","onClick","className","tabTitle","graphs","push","Number","Graph","style","display","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2abc80b.chunk.js","sourcesContent":["import { scaleLinear } from 'd3-scale'\n\nexport function drawChromosomeHeatmap(context, color, heatmapData, cellWidth = 1, cellHeight = 1, padding = 2, drawTick = false) {\n  // context draw heatmap and return the width and height of the heatmap\n  function xOffset(i) {\n    let offset = 0;\n    for (let index = 0; index < i; ++index) {\n      offset += cellWidth * heatmapData[index].value[0].length + padding\n    }\n    return offset;\n  }\n\n  // x axis ticks with canvas\n  function drawTick(index) {\n    context.beginPath()\n    context.fillStyle = \"black\"\n    context.fillRect((xOffset(index) + xOffset(index + 1)) / 2, 0, 1, index % 2 === 1 ? 10 : 20)\n  }\n\n  function drawTickText(index) {\n    context.textAlign = \"center\"\n    context.fillStyle = \"#000000\"\n    context.font = cellWidth * 24 + \"px Arial\"\n    context.fillText(heatmapData[index].chr, (xOffset(index) + xOffset(index + 1)) / 2, index % 2 === 1 ? 30 : 43)\n  }\n\n  function drawHeatmapCell(x, y, color) {\n    context.beginPath()\n    context.fillStyle = color\n    context.fillRect(x, y, cellWidth, cellHeight)\n  }\n\n  function drawHeatmapChromosome(chr_index) {\n    context.save()\n    context.translate(xOffset(chr_index), 0)\n    const chr_data = heatmapData[chr_index].value\n    for (let y_index = 0; y_index < chr_data.length; ++y_index) {\n      for (let x_index = 0; x_index < chr_data[0].length; ++x_index) {\n        drawHeatmapCell(x[chr_index](x_index), y(y_index), color(chr_data[y_index][x_index]))\n      }\n    }\n    context.restore()\n  }\n\n\n  const columnAnnotations = [...Array(heatmapData.length).keys()]\n\n  const x = columnAnnotations.map(c => scaleLinear()\n    .domain([0, heatmapData[c].value[0].length])\n    .rangeRound([0, cellWidth * heatmapData[c].value[0].length]))\n\n  const y = scaleLinear()\n    .domain([0, heatmapData[0].value.length])\n    .rangeRound([0, cellHeight * heatmapData[0].value.length])\n\n  const heatmapWidth = xOffset(columnAnnotations[columnAnnotations.length - 1]) + heatmapData[columnAnnotations.length - 1].value[0].length * cellWidth\n  const heatmapHeight = cellHeight * heatmapData[0].value.length\n\n  // draw ticks\n  context.save()\n  context.translate(0, heatmapHeight)\n\n  columnAnnotations.forEach(index => {\n    drawTick(index)\n  })\n\n  // draw tick texts\n  columnAnnotations.forEach(index => {\n    drawTickText(index)\n  })\n  context.restore()\n\n  // draw heatmap chromosome by chromosome\n  columnAnnotations.forEach(index => {\n    drawHeatmapChromosome(index)\n  })\n\n  return [heatmapWidth, heatmapHeight]\n}\n","export function drawHeatmapRowAnnotation(context, colors, annotationData, annotationColumns, cellHeight = 1, cellWidth = 1, padding = 2, showColumnLabel=false) {\n  function drawAnnotationCell(x, y, color) {\n    context.beginPath()\n    context.fillStyle = color\n    context.fillRect(x, y, cellWidth, cellHeight)\n  }\n\n  function drawOneAnnotationLabel(x, y, label) {\n    context.save()\n    context.translate(x, y)\n    context.fillStyle = \"black\"\n    context.textAlign = \"right\";\n    context.font = cellWidth + 4 + \"px Arial\"\n    let width = context.measureText(label).width\n    context.rotate(3 * Math.PI / 2)\n    context.fillText(label, 0, 0)\n    context.restore()\n    return width\n  }\n\n  function xOffset(index) {\n    return index * (padding + cellWidth)\n  }\n\n  function drawOneAnnotation(columnIndex, color, annotationDataColumn) {\n    annotationDataColumn.forEach((value, index) => {\n      drawAnnotationCell(xOffset(columnIndex), index * cellHeight, color(value))\n    })\n  }\n\n\n  const annotationWidth = annotationColumns.length * cellWidth + (annotationColumns.length - 1) * padding\n  let annotationHeight = annotationData[annotationColumns[0]].length * cellHeight\n\n\n  let textHeight = 0\n  // draw annotation columns\n  annotationColumns.forEach((columnName, columnIndex) => {\n    drawOneAnnotation(columnIndex, colors[columnIndex], annotationData[columnName])\n    if(showColumnLabel){\n      textHeight = Math.max(drawOneAnnotationLabel(xOffset(columnIndex) + cellWidth, annotationHeight + 5, columnName), textHeight)\n    }\n  })\n\n  annotationHeight = annotationHeight + textHeight + 5\n\n  return [annotationWidth, annotationHeight]\n\n\n}\n","import { schemeSet1, schemeSet2, schemeSet3 } from 'd3-scale-chromatic'\n\nexport function categoricalColorGenerator(allData) {\n    const colors = schemeSet1.concat(schemeSet2).concat(schemeSet3)\n    let dataSet = new Set(allData)\n    let data = [...dataSet]\n    data.sort()\n    // map data to value\n    let colorMap = {}\n    for (let index = 0; index < data.length; index++) {\n        if (data[index] !== null) {\n            colorMap[data[index]] = colors[index]\n        }\n    }\n    const colorFunc = function (input) {\n        if (input === null || input == \"\") {\n            return \"#808080\"\n        } else {\n            return colorMap[input]\n        }\n    }\n\n    return colorFunc\n}\n\nexport function addColors(color, data) {\n    const colors = schemeSet3.concat(schemeSet1).concat(schemeSet2)\n    let colorMap = {}\n\n    for (let index = 0; index < data.length; ++index) {\n        if (color(data[index]) === undefined) {\n            colorMap[data[index]] = colors[index]\n        } else {\n            colorMap[data[index]] = color(data[index])\n        }\n    }\n    const colorFunc = function (input) {\n        if (input === null) {\n            return \"#808080\"\n        } else {\n            return colorMap[input]\n        }\n    }\n\n    return colorFunc\n}\n\nexport function convertHexToRgba(hex, alpha=1){\n    let r = parseInt(hex.slice(1, 3), 16)\n    let g = parseInt(hex.slice(3, 5), 16)\n    let b = parseInt(hex.slice(5, 7), 16)\n\n    return 'rgba('+r+', ' + g + ', ' + b + ', ' + alpha + ')'\n}\n\n","import { hierarchy, cluster, tree} from \"d3-hierarchy\";\nimport {convertHexToRgba} from \"./CategoricalColor\"\nimport { pie } from \"d3-shape\"\n\nexport function drawHeatmapPhylo(context, data, phyloWidth, cellHeight, is_tree_cluster=true, nodePieCharts=null, color=null, scaleTo = 50, outerRingWidth = 3, padding = 2){\n\n  function separation1(a, b) {\n    return a.parent === b.parent ? cellHeight : cellHeight\n  }\n  \n  const tree_func = data => {\n    const root = hierarchy(data);\n    //console.log(root)\n    if(is_tree_cluster){\n      return cluster().nodeSize([cellHeight , phyloWidth / (root.height + 1)]).separation(separation1)(root);\n    }else{\n      return tree().nodeSize([cellHeight , phyloWidth / (root.height + 1)]).separation(separation1)(root);\n    }\n  }  \n\n  function calculateMaxLength(tree, previousLength){\n    if(tree.data !== undefined){\n      tree.y_scaled = tree.data.length + previousLength\n      if(tree.children !== undefined){\n        for(let i=0; i<tree.children.length; i++){\n          calculateMaxLength(tree.children[i], tree.y_scaled)\n        }\n      }      \n    }\n\n  }\n\n  function calculateMaxHeight(tree){\n    let currentHeight = tree.y;\n    let childY = tree.y;\n    let currentScaledY = tree.y_scaled\n    let childScaledY = tree.y_scaled\n    if(tree.children != undefined){\n      for(let i=0; i<tree.children.length; i++){\n        let results = calculateMaxHeight(tree.children[i]);\n        childY = results[0]\n        currentHeight = currentHeight > childY ? currentHeight : childY;\n        childScaledY = results[1]\n        currentScaledY = currentScaledY > childScaledY ? currentScaledY : childScaledY;\n      }\n    }\n    return [currentHeight, currentScaledY];\n  }  \n\n  function scaleTreeHeight(tree, scale){\n    tree.y = tree.y_scaled * scale\n    if(tree.children !== undefined){\n      for(let i=0; i<tree.children.length; i++){\n        scaleTreeHeight(tree.children[i], scale)\n      }\n    }  \n  }  \n\n  function scaleTree(tree){\n    calculateMaxLength(tree, 0)\n    let maxs = calculateMaxHeight(tree)\n    scaleTreeHeight(tree, maxs[0]/maxs[1])\n  }\n\n  // draw lines connecting each node in phylo tree\n  function drawLines(descendant){\n    if(\"children\" in descendant){\n      // calculate joint point\n      let minChildY = Infinity;\n      let minChildX = Infinity;\n      let maxChildX = -minChildX\n      for(let index = 0; index < descendant.children.length; index += 1){\n        if(descendant.children[index].y < minChildY) minChildY = descendant.children[index].y\n        if(descendant.children[index].x < minChildX) minChildX = descendant.children[index].x\n        if(descendant.children[index].x > maxChildX) maxChildX = descendant.children[index].x\n      }\n      let jointY = (descendant.y + minChildY)/2\n\n      context.beginPath()\n      context.moveTo(descendant.y, descendant.x)\n      context.lineTo(jointY, descendant.x)\n      context.moveTo(jointY, minChildX)\n      context.lineTo(jointY, maxChildX)\n      for(let index = 0; index < descendant.children.length; index += 1){\n        context.moveTo(jointY, descendant.children[index].x)\n        context.lineTo(descendant.children[index].y, descendant.children[index].x)\n      }\n      context.stroke()\n    }\n  }\n\n  const root = tree_func(data);\n\n  console.log(root)\n\n  let x0 = Infinity;\n  let x1 = -x0;\n  root.each(d => {\n    if (d.x > x1) x1 = d.x;\n    if (d.x < x0) x0 = d.x;\n  });\n\n  let y0 = Infinity;\n  let y1 = -y0;\n  root.each(d => {\n    if (d.y > y1) y1 = d.y;\n    if (d.y < y0) y0 = d.y;\n  });  \n    \n\n  context.save()\n  context.translate(0, -x0)\n\n  // draw phylogenetic tree\n  if(root.data.length !== undefined){\n    root.data.length = 0\n    scaleTree(root)\n  }\n  root.descendants().forEach(drawLines);\n\n  if(nodePieCharts !== null){\n    drawNodePieCharts(context, nodePieCharts, root, color, scaleTo, outerRingWidth, padding)\n  }\n  context.restore()\n\n  return [phyloWidth, x1 - x0]\n}\n\n\nfunction drawNodePieCharts(context, data, treeData, color, scaleTo = 100, outerRingWidth = 10, padding = 3){\n    let arcs = {}\n    for (let index = 0; index < data.length; ++index) {\n      arcs[data[index].name] = {}\n      arcs[data[index].name].inner = data[index].value\n  \n      let total_count = 0\n      for (let j = 0; j < data[index].value.length; ++j) {\n        total_count += data[index].value[j].value\n      }\n      arcs[data[index].name].outer = [{\"name\":data[index].name, \"value\":total_count}]    \n    }\n    \n    const pie_func = pie()\n      .padAngle(0.005)\n      .sort(null)\n      .value(d => d.value)\n  \n    // draw outer ring\n    function drawOuterRing(context, dataOuter, color, scale, x, y, alpha = 0.7){\n      const data = pie_func(dataOuter)\n      for (let index = 0; index < data.length; ++index) {\n        context.beginPath()\n        context.fillStyle = convertHexToRgba(color(data[0].data.name), alpha)\n        context.arc(x, y, data[index].value / scale + outerRingWidth + padding, data[index].startAngle,  data[index].endAngle, true)\n        context.arc(x, y, data[index].value / scale + padding, data[index].startAngle, data[index].endAngle, false)\n        context.fill()  \n      }\n    }\n  \n    // draw inner pie\n    function drawInnerPie(context, dataOuter, dataInner, color, scale, x, y, alpha = 0.7){\n      const data = pie_func(dataInner)\n      const radius = dataOuter[0].value\n      for (let index = 0; index < data.length; ++index) {\n        context.beginPath()\n        context.fillStyle = convertHexToRgba(color(data[index].data.name), alpha)\n        context.moveTo(x, y)\n        context.arc(x, y, radius / scale, data[index].startAngle,  data[index].endAngle, false)\n        context.lineTo(x, y)\n        context.fill()\n      }\n    }  \n  \n  \n    const descendants = treeData.descendants()\n  \n    // find the maximum radius\n    const maxRadius = Math.max.apply(Math, Object.values(arcs).map(x =>x.outer[0].value))\n    const scale = maxRadius / scaleTo\n  \n    descendants.forEach(\n     descendant => {\n      if(descendant.data.name in arcs){\n        drawOuterRing(context, arcs[descendant.data.name].outer, color, scale, descendant.y, descendant.x)\n        \n        drawInnerPie(context, arcs[descendant.data.name].outer,arcs[descendant.data.name].inner, color, scale, descendant.y, descendant.x)\n      }     \n     }\n    )\n    \n    \n  }  ","import React, { Component } from 'react'\nimport './App.css'\nimport { drawChromosomeHeatmap } from './Heatmap.js'\nimport { drawHeatmapRowAnnotation } from './HeatmapAnnotation'\nimport { categoricalColorGenerator, addColors} from './CategoricalColor'\nimport { drawHeatmapPhylo } from './Phylo'\nimport { drawSankey } from './Sankey'\nimport { select } from 'd3-selection'\n\nclass Figure extends Component {\n    constructor(props) {\n        super(props)\n        this.createFigure = this.createFigure.bind(this)\n    }\n    componentDidMount() {\n        this.createFigure()\n    }\n    componentDidUpdate() {\n\n    }\n    createFigure() {\n        const node = this.node\n        const data = this.props.data\n\n        const canvasMap = select(node)\n            .attr(\"class\", \"canvas-plot\")\n            .attr(\"width\", 4000)\n            .attr(\"height\", 10000)\n\n        const context = canvasMap.node().getContext('2d')\n\n        const columnAnnotations = [\"clonealign_tree_id\"]\n\n        // generate colors for annotation columns\n        let colors = columnAnnotations.slice()\n        colors.forEach(function (value, index) { this[index] = categoricalColorGenerator(data.cnv_meta[this[index]]) }, colors)\n\n        // color for cnv heatmap\n        let cnvColor = function (n) {\n            const color_map = [\"#3182BD\", \"#9ECAE1\", \"#CCCCCC\", \"#FDCC8A\", \"#FC8D59\", \"#E34A33\", \"#B30000\", \"#980043\", \"#DD1C77\", \"#DF65B0\", \"#C994C7\", \"#D4B9DA\"]\n            return color_map[n]\n        }\n\n        // color for expr heatmap\n        let exprColor = function (n) {\n            const color_map = [\"#08008B\", \"#24239B\", \"#4947AB\", \"#6D6DBB\", \"#9191CB\", \"#B6B6DD\", \"#DADAEE\", \"#E7E7E7\", \"#EED9DA\", \"#DDB6B6\", \"#CB9191\", \"#BB6D6D\", \"#AB4848\", \"#9B2424\", \"#8A0100\"]\n            return color_map[n]\n        }\n\n        // draw phylo tree with pie charts\n        let pieChartColor = addColors(colors[0], data.pie_chart.map(o => o.name))\n        // replace colors[0] with pieChartColor\n        colors[0] = pieChartColor\n\n        // draw phylo tree\n        context.translate(0, 200)\n        context.save()\n        context.translate(500, 0)\n        const phyloDims = drawHeatmapPhylo(context, data.tree, 1000, 0.7, true, data.pie_chart, pieChartColor)\n        context.restore()\n\n        // move to heatmaps\n        context.save()\n        context.translate(100, phyloDims[1] + 50)\n\n        // draw heatmap annotation tree\n        const heatmapPhyloDims = drawHeatmapPhylo(context, data.tree, 450, 1, true, data.pie_chart, pieChartColor, 50, 4)\n\n        // move to cnv heatmap column annotation\n        context.translate(heatmapPhyloDims[0], 0)\n        const annotationDimensions = drawHeatmapRowAnnotation(context, colors, data.cnv_meta, columnAnnotations, 1, 20, 5)\n\n        // move to cnv heatmap\n        context.translate(annotationDimensions[0] + 10, 0)\n        const cnvDimensions = drawChromosomeHeatmap(context, cnvColor, data.cnv_matrix, 1, 1, 5)\n\n        // move to sankey graph\n        context.translate(cnvDimensions[0], 0)\n        const sankeyWidth = drawSankey(context, data.sankey, colors[0], 1, 1, 70, 0, 10, data.terminal_nodes)\n\n        // move to expr heatmap column annotation\n        context.translate(sankeyWidth, 0)\n        const annotationExprDimensions = drawHeatmapRowAnnotation(context, colors, data.expr_meta, columnAnnotations, 1, 20, 5)\n\n\n        // move to expr heatmap\n        context.translate(annotationExprDimensions[0] + 10, 0)\n        const exprDimensions = drawChromosomeHeatmap(context, exprColor, data.expr_matrix, 1, 1, 5)\n\n        context.restore()\n    }\n\n    render() {\n        return <canvas ref={node => this.node = node}></canvas>\n    }\n}\n\nexport default Figure","export function drawSankey(context, data, color, leftHeight, rightHeight, rightStartX = 200, rightStartY = 50, columnWidth = 10, filters = null) {\n    function drawRect(context, x, y, width, height, color) {\n        context.fillStyle = color\n        context.fillRect(x, y, width, height)\n    }\n\n    function drawFlow(x0, y0, x1, y1, x2, y2, x3, y3, color) {\n        // bezier curver from (x0, y0) to (x1, y1)\n        // add additional transparency to color\n        if (y0 === y2 || y1 == y3) {\n            return\n        } else {\n            context.beginPath()\n            context.fillStyle = color.concat(\"\", \"80\")\n            context.moveTo(x0, y0)\n            context.bezierCurveTo(x0, (y0 + y1) / 2, x1, (y0 + y1) / 2, x1, y1)\n            context.lineTo(x3, y3)\n            context.bezierCurveTo(x3, (y2 + y3) / 2, x2, (y2 + y3) / 2, x2, y2)\n            context.fill()\n        }\n    }\n\n    data.forEach(element => {\n        // draw left annotation column\n        drawRect(context, 0, element[\"left\"][0] * leftHeight, columnWidth, (element[\"left\"][1] - element[\"left\"][0]) * leftHeight, color(element[\"name\"]))\n\n        // draw right annotation column\n        drawRect(context, rightStartX, element[\"right\"][0] * rightHeight + rightStartY, columnWidth, (element[\"right\"][1] - element[\"right\"][0]) * rightHeight, color(element[\"name\"]))\n\n        // connects two annotation\n        if (filters !== null) {\n            if (filters.includes(element[\"name\"])) {\n                drawFlow(columnWidth, element[\"left\"][0] * leftHeight, rightStartX, element[\"right\"][0] * rightHeight + rightStartY, columnWidth, element[\"left\"][1] * leftHeight, rightStartX, element[\"right\"][1] * rightHeight + rightStartY, color(element[\"name\"]))\n            }\n        } else {\n            drawFlow(columnWidth, element[\"left\"][0] * leftHeight, rightStartX, element[\"right\"][0] * rightHeight + rightStartY, columnWidth, element[\"left\"][1] * leftHeight, rightStartX, element[\"right\"][1] * rightHeight + rightStartY, color(element[\"name\"]))\n        }\n\n    })\n\n    return columnWidth * 2 + rightStartX\n}","import './Tab.css'\nimport Figure from './Figure'\nimport React, { Component } from 'react'\n\n\nclass Tab extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      visibleTab: props.data[0].id,\n      // availableFigs: {}\n      availableFigs: new Set([props.data[0].id])\n    }\n    this.handleClick = this.handleClick.bind(this)\n    this.switchTab = this.switchTab.bind(this)\n\n    // props.data.forEach(dataItem => {\n    //   this.setState((state, props) => {\n    //     let newAvailableFigs = state.availableFigs\n    //     newAvailableFigs[dataItem.id] = null\n    //     return {\n    //       visibleTab: state.visibleTab,\n    //       availableFigs: newAvailableFigs\n    //     }\n    //   })\n    // })\n  }\n\n  handleClick(id) {\n    // if (this.state.availableFigs[id] == null) {\n    //   this.renderTab(id);\n    // }\n    this.switchTab(id);\n  }\n\n  switchTab(id) {\n    this.setState((state, props) => {\n      let newAvailableFigs = state.availableFigs\n      if (!state.availableFigs.has(id)) {\n        newAvailableFigs.add(id)\n      }\n      return {\n        visibleTab: id,\n        availableFigs: newAvailableFigs\n      }\n    })\n  }\n\n  // renderTab(id) {\n  //   this.setState((state, props) => {\n  //     let newAvailableFigs = state.availableFigs\n  //     newAvailableFigs[id] = \n  //       // <div key={id} style={{}}>\n  //       //   <Figure data={this.props.data[Number.parseInt(id)].data} key={id}/>\n  //       // </div>\n  //       <Graph\n  //         data={this.props.data[Number.parseInt(id)].data}\n  //         id={id}\n  //         visibleTab={this.state.visibleTab}></Graph>\n  //     return {\n  //       visibleTab: state.visibleTab,\n  //       availableFigs: newAvailableFigs\n  //     }\n  //   })\n  // }\n\n\n\n  render() {\n    const listTitles = this.props.data.map(item =>\n      <li onClick={() => this.handleClick(item.id)}\n        className={this.state.visibleTab === item.id ? \"tab-title tab-title--active\" : \"tab-title\"} key={item.id}>{item.tabTitle}</li>\n    )\n\n    const graphs = []\n    for (const item of this.state.availableFigs) {\n      graphs.push(<Graph data={this.props.data[Number.parseInt(item)].data} id={item} key={item} visibleTab={this.state.visibleTab}></Graph>)\n    }\n\n    return (\n      <div className=\"tabs\">\n        <ul className=\"tabs-titles\">\n          {listTitles}\n        </ul>\n        {graphs}\n      </div>\n    )\n  }\n\n}\n\nclass Graph extends Component {\n  render() {\n    return (\n      <div style={{display: this.props.visibleTab === this.props.id ? \"\" : \"none\"}} id={this.props.id} key={this.props.id}>\n        <Figure data={this.props.data} id={this.props.id} key={this.props.id}/>\n      </div>\n    )\n  }\n}\n\nexport default Tab\n\n","import React, { Component } from 'react'\nimport './App.css'\nimport Tab from './Tab'\nimport data from './test.json'\n\nclass App extends Component {\n   render() {\n   return (\n      <div className='App'>\n      <div>\n      <Tab data={data}/>\n      </div>\n      </div>\n   )\n   }\n}\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}